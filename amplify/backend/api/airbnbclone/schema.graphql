type Mutation {
  createPaymentIntent(amount: Int!): PaymentIntent! @function(name: "CreatePaymentIntent-${env}")
}

type PaymentIntent {
  clientSecret: String!
}
type Review
  @model
  @key(name: "byUser", fields: ["userID", "postId"])
  @key(name: "byPost", fields: ["postId", "userID"]) {
  id: ID!
  post: Post! @connection(fields: ["postId"])
  user: User! @connection(fields: ["userID"])
  postId: ID!
  userID: String!
  rating: Int!
  review: String!
  parentReviewId: String
}

type Viewing @model {
  id: ID!
  postId: String
  username: String
  viewingDate: String
  viewingTime: String
  usercontact: String
  userlocation: String
  viewingDateTime: String
  userId: String
  status: String
  assignedRep: String
  comments: [Comment] @connection(keyName: "byViewing", fields: ["id"])
}

type Comment @model @key(name: "byViewing", fields: ["viewingId"]) {
  id: ID!
  content: String
  author: String
  createdAt: String
  updatedAt: String
  viewing: Viewing @connection(fields: ["viewingId"])
  viewingId: ID
}

type User @model {
  id: String!
  username: String
  email: String
  imageuri: String
  posts: [Post] @connection(keyName: "byUser", fields: ["id"])
  reviews: [Review] @connection(keyName: "byUser", fields: ["id"])
}

type Post
  @model
  @key(name: "byUser", fields: ["userID"])
  @key(
    name: "byCreatedTime"
    fields: ["type", "createdTime"]
    queryField: "listPostsSortedByCreatedTime"
  ) {
  id: ID!

  createdTime: AWSDateTime
  updatedTime: AWSDateTime
  userID: String
  user: User @connection(fields: ["userID"])
  reviews: [Review] @connection(keyName: "byPost", fields: ["id"])
  image: String
  images: [String]
  type: String
  title: String
  description: String!
  mode: String
  phoneNumbers: [String]
  marketerNumber: [String]
  currency: [String]

  status: String
  availabilityDate: String
  homeownerName: String
  negotiable: String
  furnished: String
  loyaltyProgram: String
  verified: String
  available: String
  bed: Int
  bedroom: Int
  bathroomNumber: Int
  maxGuests: Int
  wifi: String
  kitchen: String
  bathroom: String
  water: String
  toilet: String
  aircondition: String
  locality: String
  sublocality: String
  videoUrl: String
  qualityScore: Float
  qualityListing: Float
  dataAccuracy: Float
  responsiveness: Float
  rentersFeedback: Float

  oldPrice: Float
  newPrice: Float

  latitude: Float
  longitude: Float
}

type PostNew @model @key(fields: ["latitude", "longitude"]) {
  id: ID!

  image: String
  images: [String]
  type: String!
  title: String!
  description: String!
  mode: String
  phoneNumbers: [String]

  bed: Int!
  bedroom: Int!
  bathroomNumber: Int
  maxGuests: Int!
  wifi: String!
  kitchen: String!
  bathroom: String!
  water: String!
  toilet: String!
  aircondition: String!
  locality: String
  sublocality: String

  oldPrice: Float
  newPrice: Float!

  latitude: Float!
  longitude: Float!
}

type ModelPostNewConnection {
  items: [PostNew]!
  nextToken: String
  scannedCount: Int
  count: Int
}
